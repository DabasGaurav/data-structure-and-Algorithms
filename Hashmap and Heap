--------------------------------- CONCEPTS AND CONSTRUCTION --------------------------------------

1. // hashmap will be an array of linkedlists of type mapNode which is essentially key value pair only. size we keep for lambda calculations. For putting value, we find hashcode of key. Iterate over that index's linkedlist and find if already present. If not we insert else we update. then calculate lambda, and rehash if required. Rehashing is done by making new double sized array, initialising it and then putting all the nodes from previous to new array. For hashcode, simnply use hashCode function and % it by size of array. To remove, do similar procedure till getting the index of the given key, then remove it and return the value removed.
    public static class hashmap<K,V>{
        public class mapNode{
            K key;
            V value;
            mapNode(K key,V value){
                this.key=key;
                this.value=value;
            }
        }

        private LinkedList<mapNode>[] buckets ;
        private int size;
        hashmap(){
            this.size = 0;
            buckets = new LinkedList[4];
            for(LinkedList l: buckets){
                l = new LinkedList<mapNode>();
            }
        }

        public void put(K key, V value){
            int hashcode = getHashcode(key);
            int idx = getIndex(hashcode, key);
            if(idx!=-1){
                buckets[hashcode].get(idx).value = value;
            }
            else{
                buckets[hashcode].add(new mapNode(key,value));
                size++;
            }
            int lambda = size/buckets.length;
            if(lambda>=2){
                rehash();
            }
        }

        public int getHashcode(K key){
            return Math.abs(key.hashCode())%buckets.length;
        }

        public int getIndex(int code, K key){
            for(int i=0;i<buckets[code].size();i++){
                if(buckets[code].get(i).key==key){
                    return i;
                }
            }
            return -1;
        }

        public void rehash(){
            LinkedList<mapNode>[] tempBucket = buckets;
            buckets = new LinkedList[buckets.length*2];
            for(LinkedList l: buckets){
                l = new LinkedList<mapNode>();
            }
            for(LinkedList<mapNode> l : tempBucket){
                for(mapNode m : l){
                    put(m.key, m.value);
                }
            }
        }

        public V get(K key){
            int hashcode = getHashcode(key);
            int idx = getIndex(hashcode, key);
            if(idx == -1)
                return null;
            return buckets[hashcode].get(idx).value;
        }

        public boolean containsKey(K key){
            return getIndex(getHashcode(key), key)!=-1;
        }

        public V remove(K key){
            int hashcode = getHashcode(key);
            int idx = getIndex(hashcode, key);
            if(idx == -1)
                return null;
            V val = buckets[hashcode].get(idx).value;
            buckets[hashcode].remove(idx);
            return val;
        }

    }

2. // by default pq in java is java. To implement we use heap. heap satisfies 2 properties - 1 is that its a complete binary tree ( helps us to physically store a logical tree like structure in an array). 2 is that the children of any node must be greater that it. thus the min element is always at the top. thus we keep an arraylist as heap. on adding we add to end and call upheapify and on remove, since removal in arraylist is O(1) only from the end, thus we swap the first (our answer) with last element and call downheapify on the 0th element. upheapify - check for child that its parent should be more prior than it (lesser here) other wise swap and call recursively for the now parent. downheapify - we check the min out of three, parent and 2 children, and then swap the min with parent if it is, then call downheapify on the swapped child. Used here is generics, thus to compare, we use a fn isSmaller, which converts both elements to comparable object and compares using compareTo function. Thus this must be defined in the K.  
    public static class priorityQueue<K> {
        ArrayList<K> heap;
        int size;
        priorityQueue(){
            heap = new ArrayList<>();
            size = 0;
        }
        public void add(K data){
            heap.add(data);
            upheapify(heap.size()-1);
        }
        public void upheapify(int idx){
            if(idx>0){
                int p = (idx-1)/2;
                if(isSmaller(heap.get(idx),heap.get(p))){
                    swap(p,idx);
                    upheapify(p);
                }
            }
        }
        public boolean isSmaller(K c, K p){
            Comparable c1 = (Comparable) c;
            Comparable c2 = (Comparable) p;
            return c1.compareTo(c2)<0;
        }
        public void swap(int i1, int i2){
            K temp = heap.get(i1);
            heap.set(i1,heap.get(i2));
            heap.set(i2,temp);
        }
        public K poll(){
            if(size!=0){
                swap(0,heap.size()-1);
                K ret = heap.get(heap.size()-1);
                heap.remove(heap.size()-1);
                downHeapify(0);
                return ret;
            }
            return null;
        }
        public void downHeapify(int idx){
            int idxMin = idx;
            int c1 = 2*idx+1;
            if(c1<heap.size()){
                if(isSmaller(heap.get(c1),heap.get(idxMin))){
                    swap(c1,idxMin);
                    idxMin = c1;
                }
            }
            int c2 = 2*idx+2;
            if(c2<heap.size()){
                if(isSmaller(heap.get(c2),heap.get(idxMin))){
                    swap(c2,idxMin);
                    idxMin = c2;
                }
            }
            if(idxMin!=idx)
                downHeapify(idxMin);
        }
    }

3. // comparable<K> should be implemented if we want to use it like shown above. it must implement a function compareTo which returns int. This is defined inside 'the' class of the object we compare on and takes only one argument. 
      public class xy implements Comparable<xy>{
        int x;
        public int compareTo(xy y){
            return this.x - y.x;
        }
    }

4. // Other way is to use comparator interface. it is implemented by any class and thus requires 2 parameters of that type. the function that needs to be defined here is just compare. and we need to pass this class's instance in the constructor of the DS that we are using.
    public class compareBasedOnXY implements Comparator<Integer>{
        public int compare(Integer i1, Integer i2){
            return i1-i2;
        }
    }
    PriorityQueue<Integer> pq = new PriorityQueue<Integer>(new compareBasedOnXY());


------------------------------------------ BASIC QUESTIONS ----------------------------------------------

3. // 


------------------------------------ SUBARRAY/SUBSTRING BASED QUESTIONS ---------------------------------

9. // the sum without any element in array is 0. now we iterate and keep prefix sum, whenever we find the prefix sum is k and that k has already appeared while prefixing, then we know that between these 2 occurrences the subarray has 0 sum. since le deke same hi hogya prefix sum. For longest, store 0->-1, then for every k store the first occurrence. For count, don't store index as value but no. of occurrences. And add the no. of occurrences of previous k.
    public static int longestZeroSum(int[] arr){
        int n = arr.length;
        HashMap<Integer,Integer> map = new HashMap<>();
        int ans = 0;
        int ssf = 0;
        map.put(0,-1);
        for(int i=0;i<n;i++){
            ssf+=arr[i];
            if(map.containsKey(ssf)){
                if(i-map.get(ssf) > ans){
                    ans = i-map.get(ssf);
                }
            }
            else{
                map.put(ssf,i);
            }
        }
        return ans;
    }

    public static int countZeroSum(int[] arr){
        int n = arr.length;
        HashMap<Integer,Integer> map = new HashMap<>();
        int ans = 0;
        int ssf = 0;
        map.put(0,1);
        for(int i=0;i<n;i++){
            ssf+=arr[i];
            if(map.containsKey(ssf)){
                ans += map.get(ssf);

            }
            map.put(ssf,map.getOrDefault(ssf,0)+1);
        }
        return ans;
    }
    
10. // For K sum, the idea remains exactly same but now when will a subarray have sum as k ? when prefix i = x and prefix j = x+k. this search for prefix - k at every point. and longest and count logic remains the same.
    public static int longestKSum(int[] arr, int k){
        int n = arr.length;
        HashMap<Integer,Integer> map = new HashMap<>();
        int ans = 0;
        int ssf = 0;
        map.put(0,-1);
        for(int i=0;i<n;i++){
            ssf+=arr[i];
            if(map.containsKey(ssf-k)){
                if(i-map.get(ssf-k) > ans){
                    ans = i-map.get(ssf-k);
                }
            }
            map.put(ssf,map.getOrDefault(ssf,i));
        }
        return ans;
    }

    public static int countKSum(int[] arr){
        int n = arr.length;
        HashMap<Integer,Integer> map = new HashMap<>();
        int ans = 0;
        int ssf = 0;
        map.put(0,1);
        for(int i=0;i<n;i++){
            ssf+=arr[i];
            if(map.containsKey(ssf-k)){
                ans += map.get(ssf-k);
            }
            map.put(ssf,map.getOrDefault(ssf,0)+1);
        }
        return ans;
    }
    
 11. // For divisibility, a subarray's sum will be divisible by k if remainder(prefix(i)) = k and remainder(prefix(j)) = k as well. think why. thus we store remainder as value and the rest code remains same as 0 sum subarray question.
   public static int longestKDivisbleSum(int[] arr, int k){
        int n = arr.length;
        HashMap<Integer,Integer> map = new HashMap<>();
        int ans = 0;
        int ssf = 0;
        map.put(0,-1);
        for(int i=0;i<n;i++){
            ssf+=arr[i];
            if(map.containsKey(ssf%k)){
                if(i-map.get(ssf%k) > ans){
                    ans = i-map.get(ssf%k);
                }
            }
            map.put(ssf%k,map.getOrDefault(ssf,i));
        }
        return ans;
    }

    public static int countKDivisibleSum(int[] arr){
        int n = arr.length;
        HashMap<Integer,Integer> map = new HashMap<>();
        int ans = 0;
        int ssf = 0;
        map.put(0,1);
        for(int i=0;i<n;i++){
            ssf+=arr[i];
            while(ssf<0){
                ssf+=k;
            }
            if(map.containsKey(ssf%k)){
                ans += map.get(ssf%k);
            }
            map.put(ssf%k,map.getOrDefault(ssf%k,0)+1);
        }
        return ans;
    }
    
12. // If 0,1 would have been there, we could make 0 as -1 and apply 0 sum subarray problem. for 0,1,2 we have to follow the generic approach, which is to literally equate number of 0,1,2 for every subarray. prefix is counting number of 0,1,2. Now to compare either we need to make a hashmap with key that denotes difference of 01 and 02 or any combination. think why (thinking process: first think if there were only 0 n 1 and we used this approach )
    public static int equal012(int[] arr){
        int n = arr.length;
        HashMap<String,Integer> map = new HashMap<>();
        int ans = 0;
        int s1 = 0;
        int s2 = 0;
        int s0 = 0;
        map.put(0,-1);
        for(int i=0;i<n;i++){
            if(arr[i]==0){
                s0++;
            }
            else if(arr[i]==1){
                s1++;
            }
            else{
                s2++;
            }
            if(map.containsKey(""+(s0-s1)+(s1-s2))){
                if(i-map.get(""+(s0-s1)+(s1-s2)) > ans){
                    ans = i-map.get(""+(s0-s1)+(s1-s2));
                }
            }
            map.put(""+(s0-s1)+(s1-s2),map.getOrDefault(""+(s0-s1)+(s1-s2),i));
        }
        return ans;
    }

    public static int countEqual012(int[] arr){
        int n = arr.length;
        HashMap<String,Integer> map = new HashMap<>();
        int ans = 0;
        int s1 = 0;
        int s2 = 0;
        int s0 = 0;
        map.put(""+0+" "+0,1);
        for(int i=0;i<n;i++){
            if(arr[i]==0){
                s0++;
            }
            else if(arr[i]==1){
                s1++;
            }
            else{
                s2++;
            }
            if(map.containsKey(""+(s0-s1)+" "+(s1-s2))){
                ans += map.get(""+(s0-s1)+" "+(s1-s2));
            }
            map.put(""+(s0-s1)+" "+(s1-s2),map.getOrDefault(""+(s0-s1)+" "+(s1-s2),0)+1);
        }
        return ans;
    }

---------------------------------------- ANAGRAMS -------------------------------------

13. // to find anagrams of p in s, we need a fixed size sliding window. Now slide it and keep track of the correct elements i.e. the elements that actually count i.e. elements in p and not exceeding the occurrences in p. So when a correct item is found we add, and when lost while moving the window forward, we subtract. whenever correct==p.length, we know that its an anagram.
public List<Integer> findAnagrams(String s, String p) {
        int n1 = s.length();
        int n2 = p.length();
        List<Integer> ans = new ArrayList<>();
        if(n2>n1){
            return ans;
        }
        HashMap<Character,Integer> map = new HashMap<>();
        for(int i=0;i<n2;i++){
            char c = p.charAt(i);
            map.put(c,map.getOrDefault(c,0)+1);
        }

        HashMap<Character,Integer> currmap = new HashMap<>();
        int i=0,j=0;
        int correct = 0;
        for(j=0;j<n2-1;j++){
            char c = s.charAt(j);
            int kmap = map.getOrDefault(c,-1);
            int kcurrmap = currmap.getOrDefault(c,-1);
            currmap.put(c,currmap.getOrDefault(c,0)+1);
            if(kmap>0 && kcurrmap<kmap){
                correct++;
            }
        }
        while(j<n1){
            char c = s.charAt(j);
            int kmap = map.getOrDefault(c,-1);
            int kcurrmap = currmap.getOrDefault(c,-1);
            currmap.put(c,currmap.getOrDefault(c,0)+1);
            if(kmap>0 && kcurrmap<kmap){
                correct++;
                if(correct==n2){
                    ans.add(i);
                }
            }
            char ci = s.charAt(i);
            int kmapi = map.getOrDefault(ci,-1);
            int kcurrmapi = currmap.getOrDefault(ci,-1);
            if(kmapi>0 && kmapi>=kcurrmapi){
                correct--;
            }
            currmap.put(ci,currmap.get(ci)-1);
            i++;   
            j++;
        }
        return ans;
    }

14. // for k anagrams check length equality first. next put any string in map and check in other string, for every letter thaat if its a correct or incorrect item. if incorrect, then do k--. return k>=0;
boolean areKAnagrams(String s1, String s2, int k) {
        int n1 = s1.length();
        int n2 = s2.length();
        if(n1!=n2){
            return false;
        }
        HashMap<Character,Integer> map = new HashMap<>();
        for(int i=0;i<n1;i++){
            char c = s1.charAt(i);
            map.put(c,map.getOrDefault(c,0)+1);
        }
        HashMap<Character,Integer> currmap = new HashMap<>();
        for(int i=0;i<n2;i++){
            char c = s2.charAt(i);
            int kmap = map.getOrDefault(c,-1);
            int kcurrmap = currmap.getOrDefault(c,-1);
            currmap.put(c,currmap.getOrDefault(c,0)+1);
            if(kmap<0 || kcurrmap>=kmap){
                k--;
                // System.out.println(i+" "+kmap+" "+kcurrmap+" "+k);
            }
        }
        return k>=0;
    }

15. // to group anagrams all we need is that count of letters should be same. so either we can use sorting or hashmap of string where string is the 26 length array that has no. of occurrences of each letter. 
public List<List<String>> groupAnagrams(String[] a) {
        int n = a.length;
        HashMap<String,List<String>> map = new HashMap<>();
        for(String s:a){
            ArrayList<Integer> arr = new ArrayList<Integer>();
            for(int i=0;i<26;i++){
                arr.add(0);
            }
            for(int i=0;i<s.length();i++){
                char c = s.charAt(i);
                arr.set((int)(c-'a'),arr.get((int)(c-'a'))+1);
            }
            if(!map.containsKey(arr.toString())){  
                map.put(arr.toString(),new ArrayList<String>());
            }
            map.get(arr.toString()).add(s);
        }
        List<List<String>> ans = new ArrayList();
        for(String s: map.keySet()){
            ans.add(map.get(s));
        }
        return ans;
    }

16. // for each corresponding letters in strings check if mapping is already been done. we need to do mapping both sides. and check both ways too.
public boolean isIsomorphic(String s, String t) {
        int n1 = s.length();
        int n2 = t.length();
        if(n1!=n2){
            return false;
        }
        HashMap<Character, Character> map1 = new HashMap<>();
        HashMap<Character, Character> map2 = new HashMap<>();
        for(int i=0;i<s.length();i++){
            char cs = s.charAt(i);
            char ct = t.charAt(i);
            
                if(map1.containsKey(cs)){
                    if(map1.get(cs)!=ct){
                        return false;
                    }
                }
                else{
                    if(map2.containsKey(ct)){
                        return false;
                    }
                    map1.put(cs,ct);
                    map2.put(ct,cs);
                }
            
        }
        return true;
    }

-------------------------------------- ACQUIRE RELEASE STRATERGY ------------------------------------------

17. // simply have a k sized window and return map size at every window. whenever any element occurrences become 0, remove it.
    public static ArrayList<Integer> kDistintWindow(int[] arr){
        ArrayList<Integer> ans = new ArrayList<>();
        HashMap<Integer,Integer> map = new HashMap<>();
        int i=0;
        for(i=0;i<k;i++){
            map.put(a[i],map.getOrDefault(a[i],0)+1);
        }
        ans.add(map.size());
        int j=0;
        while(i<n){
            map.put(a[i],map.getOrDefault(a[i],0)+1);
            map.put(a[j],map.get(a[j])-1);
            if(map.get(a[j])==0){
                map.remove(a[j]);
            }
            ans.add(map.size());
            i++;
            j++;
        }
        return ans;
    }

18. // basic 2 ptr approach. if the item is correct, then ++. then when its equal to t.length, -- till its incorrect again then move forward again. Implementation is the key.
public String minWindow(String s, String t) {
    if(s == null || s.length() < t.length() || s.length() == 0){
        return "";
    }
    HashMap<Character,Integer> map = new HashMap<Character,Integer>();
    for(char c : t.toCharArray()){
        if(map.containsKey(c)){
            map.put(c,map.get(c)+1);
        }else{
            map.put(c,1);
        }
    }
    int left = 0;
    int minLeft = 0;
    int minLen = s.length()+1;
    int count = 0;
    for(int right = 0; right < s.length(); right++){
        if(map.containsKey(s.charAt(right))){
            map.put(s.charAt(right),map.get(s.charAt(right))-1);
            if(map.get(s.charAt(right)) >= 0){
                count ++;
            }
            while(count == t.length()){
                if(right-left+1 < minLen){
                    minLeft = left;
                    minLen = right-left+1;
                }
                if(map.containsKey(s.charAt(left))){
                    map.put(s.charAt(left),map.get(s.charAt(left))+1);
                    if(map.get(s.charAt(left)) > 0){
                        count --;
                    }
                }
                left ++ ;
            }
        }
    }
    if(minLen>s.length())  
    {  
        return "";  
    }  
    
    return s.substring(minLeft,minLeft+minLen);
}

19. // simply iterate on string, whenever we incur an element that is repeated, we increment i till that element is dropped. then again we start iterating j till next duplicate item is found.
public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int i=0;
        HashMap<Character,Integer> map = new HashMap<>();
        int ans = 0;
        for(int j=0;j<n;j++){
            char c = s.charAt(j);
            if(map.getOrDefault(c,0)>0){
                while(map.get(c)>0){
                    map.put(s.charAt(i),0);
                    i++;
                }
            }
            map.put(c,1);
            ans = Math.max(ans,j-i+1);
        }
        return ans;
    }

20. // for at least k, remove the check on line 584. 
public int longestkSubstr(String s, int k) {
        int n = s.length();
        int i=0;
        HashMap<Character,Integer> map = new HashMap<>();
        int ans = -1;
        for(int j=0;j<n;j++){
            char c = s.charAt(j);
            map.put(c, map.getOrDefault(c,0)+1);
            if(k<map.size()){
                while(map.size()>k){
                    map.put(s.charAt(i), map.get(s.charAt(i))-1);
                    if(map.get(s.charAt(i))==0){
                        map.remove(s.charAt(i));
                    }
                    i++;
                }
            }
            if(map.size()==k)
            ans = Math.max(j-i+1,ans);
        }
        return ans;
    }

21. // for equivalent array, calculate k first then apply the same answet as above.

22. // for permutation of string, just check if there is an anagram of s2 in s1.


----------------------------------------- GRAPH TYPE -------------------------------------------

23. // find the ceo. make a map of all managers and their direct children. Now starting from ceo, make calls for all children to tell their size and put in answer hashmap in post call of tree. its logically a tree but not physically.


------------------------------------- MISCELLANEOUS --------------------------------------------

24. //
public int numRabbits(int[] a) {
        int n = a.length;
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<n;i++){
            map.put(a[i],map.getOrDefault(a[i],0)+1);
        }
        int ans = 0;
        for(int i : map.keySet()){
            // System.out.println(Math.ceil((map.get(i)*1.0)/(i+1)));
            ans+= (i+1)*(int)(Math.ceil((map.get(i)*1.0)/(i+1)));
        }
        return ans;
    }
    
25. // make prefix array for each and keep storing the occurrence of each brick end in hashmap and keep track of max no. of occurrences. max is the answer.
    public int leastBricks(List<List<Integer>> a) {
        HashMap<Integer,Integer> map = new HashMap<>();
        int ans = 0;

        for(List<Integer> list : a){
            int i = 0;
           for(int j=0;j<list.size()-1;j++){
               int k = list.get(j);
               i+=k;
               map.put(i,map.getOrDefault(i,0)+1);
               ans = Math.max(ans,map.get(i));
           }
        }
        return a.size()-ans;
    }


26. // for max freq stack, we maintain 3 things. first is a hashmap which has frequency as key and stack for that frequency as key. then a map with all numbers corresponding to their curr frequencies. and finally current max frequency. when pushing, we update the frequency of the no. to be pushed, also we check if we need to update the max freq, and finally, we will push that number in stack of the corresponding freq (to keep track of ordering). on pop, we remove from max freq stack, decrease the freq of the popped element, and if freq's stack is empty we decrease our max freq and remove that stack entry.
class FreqStack {
    HashMap<Integer, Integer> freq = new HashMap<>();
    HashMap<Integer, Stack<Integer>> m = new HashMap<>();
    int maxfreq = 0;

    public void push(int x) {
        int f = freq.getOrDefault(x, 0) + 1;
        freq.put(x, f);
        maxfreq = Math.max(maxfreq, f);
        if (!m.containsKey(f)) m.put(f, new Stack<Integer>());
        m.get(f).add(x);
    }

    public int pop() {
        int x = m.get(maxfreq).pop();
        freq.put(x, maxfreq - 1);
        if (m.get(maxfreq).size() == 0) maxfreq--;
        return x;
    }
}

27. // X of a kind. // store frequency of each number in hashmap. keep track of the min frequency. for all other numbers, the frequency must be divisible by the min. (in other words the freq of all's GCD should be equal to 1)

28. // LRU cache. We keep a doubly linked list which is literally the LRU cache. (kind of acts as a stack). then we keep a hashmap for the value. Everytime we put something, we either delete an old entry if its a new entry, or we move it to front if its already an old entry.

29. // we keep an arrayList so that we can get a random index and give value for that index. insert is alread O(1). for delete, its O(1) in hashmap but in arrayList we need to swap it with last index and then remove it. we keep hashmap of no -> index in arrayList.

30. // for Tiny url, we create hashmap of tiny->long since tiny must be unique. to create url, keep adding random chars to a string till new string not found, then add in map.

31. // for line reflection, find the 2 most farthest points. and based on them make the mirror. now for all others, we can easily check if there's corresponding image or not.

32. // for reorganise strings, keep a max heap and at the time of poppoing, store the most recent element not in the heap, but separately such that it does not reoccur instantly, then push it back once another element is popped, and so on.










